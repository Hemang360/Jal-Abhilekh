
import React, { useState, useEffect } from 'react';
import { Dam } from '@/entities/Dam';
import { useNavigate } from 'react-router-dom';
import { createPageUrl } from '@/utils';
import { motion } from 'framer-motion';
import { ArrowLeft, MapPin, Droplets, Calendar, TrendingUp } from 'lucide-react';
import { format } from 'date-fns';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsList, TabsTrigger } from '@/components/ui/tabs';
import WaterLevelChart from '../components/detail/WaterLevelChart';
import AlertsList from '../components/detail/AlertsList';
import { Skeleton } from '@/components/ui/skeleton';

export default function DamDetail({ dams: allDams, loading: isLoading }) {
  const navigate = useNavigate();
  const [dam, setDam] = useState(null);
  const [loading, setLoading] = useState(true);
  const [chartMetric, setChartMetric] = useState('percentage');

  useEffect(() => {
    setLoading(isLoading);
    if (!isLoading && allDams) {
      const urlParams = new URLSearchParams(window.location.search);
      const damId = urlParams.get('id');
      
      if (!damId) {
        navigate(createPageUrl('Dashboard'));
        return;
      }
      
      const foundDam = allDams.find(d => d.id === damId);
      
      if (foundDam) {
        setDam(foundDam);
      } else {
        // If not found in the filtered list (e.g., non-Indian dam, or dam ID doesn't exist), redirect.
        navigate(createPageUrl('Dashboard'));
      }
    }
  }, [isLoading, allDams, navigate]);

  if (loading) {
    return (
      <div className="h-full overflow-auto bg-gray-50 p-6">
        <Skeleton className="h-12 w-64 mb-6" />
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <div className="lg:col-span-2 space-y-6">
            <Skeleton className="h-96 rounded-xl" />
            <Skeleton className="h-64 rounded-xl" />
          </div>
          <div className="space-y-6">
            <Skeleton className="h-64 rounded-xl" />
            <Skeleton className="h-64 rounded-xl" />
          </div>
        </div>
      </div>
    );
  }

  if (!dam) return null; // Should not happen if redirects work correctly, but good for safety

  const getStatusConfig = (status) => {
    switch (status) {
      case 'Critical':
        return { className: 'bg-red-100 text-red-700 border-red-200', label: 'Critical' };
      case 'Caution':
        return { className: 'bg-yellow-100 text-yellow-700 border-yellow-200', label: 'Warning' };
      default:
        return { className: 'bg-green-100 text-green-700 border-green-200', label: 'Normal' };
    }
  };

  const statusConfig = getStatusConfig(dam.status);

  return (
    <div className="h-full overflow-auto" style={{ backgroundColor: '#F8FAFB' }}>
      <header className="bg-white border-b border-gray-200 px-6 py-4">
        <Button
          variant="outline"
          onClick={() => navigate(createPageUrl('Dashboard'))}
          className="mb-4"
        >
          <ArrowLeft className="w-4 h-4 mr-2" />
          Back to Dashboard
        </Button>

        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">{dam.name}</h1>
            <div className="flex items-center gap-4 text-gray-600">
              <div className="flex items-center gap-2">
                <Droplets className="w-4 h-4 text-blue-600" />
                <span>{dam.river_name}</span>
              </div>
              <span>•</span>
              <div className="flex items-center gap-2">
                <MapPin className="w-4 h-4" />
                <span>{dam.location}, {dam.state}</span>
              </div>
            </div>
          </div>
          <span className={`inline-flex px-4 py-2 rounded-full text-sm font-semibold border ${statusConfig.className}`}>
            {statusConfig.label}
          </span>
        </div>
      </header>

      <div className="p-6">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <div className="lg:col-span-2 space-y-6">
            {dam.image_url && (
              <Card className="border-gray-200 overflow-hidden">
                <div className="relative h-96">
                  <img 
                    src={dam.image_url} 
                    alt={dam.name}
                    className="w-full h-full object-cover"
                  />
                  <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent" />
                  <div className="absolute bottom-4 left-4 text-white">
                    <p className="text-lg font-semibold">{dam.name}</p>
                    <p className="text-sm opacity-90">{dam.river_name}</p>
                  </div>
                </div>
              </Card>
            )}

            <Card className="border-gray-200">
              <CardHeader className="flex flex-row items-center justify-between">
                <CardTitle>Water Level Trends</CardTitle>
                <Tabs value={chartMetric} onValueChange={setChartMetric}>
                  <TabsList>
                    <TabsTrigger value="percentage">%</TabsTrigger>
                    <TabsTrigger value="meters">Meters</TabsTrigger>
                  </TabsList>
                </Tabs>
              </CardHeader>
              <CardContent>
                {dam.historical_data && dam.historical_data.length > 0 ? (
                  <WaterLevelChart data={dam.historical_data} metric={chartMetric} />
                ) : (
                  <div className="text-center py-12 text-gray-500">
                    <TrendingUp className="w-12 h-12 mx-auto mb-3 text-gray-300" />
                    <p>No historical data available</p>
                  </div>
                )}
              </CardContent>
            </Card>

            {dam.description && (
              <Card className="border-gray-200">
                <CardHeader>
                  <CardTitle>About This Dam</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-gray-700 leading-relaxed">{dam.description}</p>
                </CardContent>
              </Card>
            )}
          </div>

          <div className="space-y-6">
            <Card className="border-gray-200 bg-gradient-to-br from-white to-blue-50">
              <CardHeader>
                <CardTitle>Current Status</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <p className="text-sm text-gray-600 mb-1">Water Level</p>
                  <div className="flex items-end gap-2">
                    <p className="text-4xl font-bold text-blue-600">{dam.current_level_meters}</p>
                    <p className="text-gray-600 mb-1">meters</p>
                  </div>
                </div>

                <div>
                  <div className="flex justify-between mb-2">
                    <p className="text-sm text-gray-600">Capacity</p>
                    <p className="text-xl font-bold text-blue-600">{dam.percentage_full}%</p>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-3 overflow-hidden">
                    <div 
                      className={`h-full rounded-full transition-all duration-1000 ${
                        dam.status === 'Critical' ? 'bg-gradient-to-r from-red-500 to-rose-600' :
                        dam.status === 'Caution' ? 'bg-gradient-to-r from-yellow-500 to-orange-500' :
                        'bg-gradient-to-r from-green-500 to-emerald-500'
                      }`}
                      style={{ width: `${dam.percentage_full}%` }}
                    />
                  </div>
                  <p className="text-xs text-gray-500 mt-1">Max: {dam.capacity_meters}m</p>
                </div>

                <div className="pt-4 border-t border-gray-200">
                  <div className="flex items-center gap-2 text-sm text-gray-600">
                    <Calendar className="w-4 h-4" />
                    <span>Last updated: {format(new Date(dam.last_updated), 'MMM d, h:mm a')}</span>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="border-gray-200">
              <CardHeader>
                <CardTitle>Dam Information</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="flex justify-between py-2 border-b border-gray-100">
                  <span className="text-sm text-gray-600">Type</span>
                  <span className="font-medium">{dam.type}</span>
                </div>
                <div className="flex justify-between py-2 border-b border-gray-100">
                  <span className="text-sm text-gray-600">Location</span>
                  <span className="font-medium">{dam.location}</span>
                </div>
                <div className="flex justify-between py-2 border-b border-gray-100">
                  <span className="text-sm text-gray-600">State</span>
                  <span className="font-medium">{dam.state}</span>
                </div>
                {dam.latitude && dam.longitude && (
                  <div className="flex justify-between py-2">
                    <span className="text-sm text-gray-600">Coordinates</span>
                    <span className="font-medium text-xs">
                      {dam.latitude.toFixed(4)}°, {dam.longitude.toFixed(4)}°
                    </span>
                  </div>
                )}
              </CardContent>
            </Card>

            <Card className={`border-gray-200 ${dam.alerts && dam.alerts.length > 0 ? 'bg-red-50' : ''}`}>
              <CardHeader>
                <CardTitle>Active Alerts</CardTitle>
              </CardHeader>
              <CardContent>
                <AlertsList alerts={dam.alerts} />
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
}
